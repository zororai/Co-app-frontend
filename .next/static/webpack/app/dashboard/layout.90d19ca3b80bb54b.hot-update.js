"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/layout",{

/***/ "(app-pages-browser)/./src/lib/auth/client.ts":
/*!********************************!*\
  !*** ./src/lib/auth/client.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authClient: () => (/* binding */ authClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ authClient auto */ \nfunction generateToken() {\n    const arr = new Uint8Array(12);\n    globalThis.crypto.getRandomValues(arr);\n    return Array.from(arr, (v)=>v.toString(16).padStart(2, '0')).join('');\n}\nconst user = {\n    id: 'USR-000',\n    avatar: '/assets/avatar.png',\n    firstName: 'Sofia',\n    lastName: 'Rivers',\n    email: 'sofia@devias.io'\n};\nclass AuthClient {\n    async signUp(_) {\n        // Make API request\n        // We do not handle the API, so we'll just generate a token and store it in localStorage.\n        const token = generateToken();\n        localStorage.setItem('custom-auth-token', token);\n        return {};\n    }\n    async signInWithOAuth(_) {\n        return {\n            error: 'Social authentication not implemented'\n        };\n    }\n    async signInWithPassword(params) {\n        const { email, password } = params;\n        try {\n            const response = await fetch('http://localhost:1000/auth/signin', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                credentials: 'include',\n                body: JSON.stringify({\n                    email,\n                    password\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                // Special handling for 401 Unauthorized\n                if (response.status === 401) {\n                    return {\n                        error: 'Invalid email or password'\n                    };\n                }\n                // For other errors, use the API response message\n                return {\n                    error: data.message || data.error || 'Authentication failed'\n                };\n            }\n            // Assuming the API returns a token in the response\n            const token = data.token || generateToken();\n            localStorage.setItem('custom-auth-token', token);\n            return {};\n        } catch (error) {\n            // Try to parse the error message if it's from the API\n            // If it's a network error or other issue\n            return {\n                error: 'Invalid email or password'\n            };\n        }\n    }\n    async resetPassword(_) {\n        return {\n            error: 'Password reset not implemented'\n        };\n    }\n    async updatePassword(_) {\n        return {\n            error: 'Update reset not implemented'\n        };\n    }\n    async getUser() {\n        // Make API request\n        // We do not handle the API, so just check if we have a token in localStorage.\n        const token = localStorage.getItem('custom-auth-token');\n        if (!token) {\n            return {\n                data: null\n            };\n        }\n        return {\n            data: user\n        };\n    }\n    async signOut() {\n        localStorage.removeItem('custom-auth-token');\n        return {};\n    }\n}\nconst authClient = new AuthClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXV0aC9jbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O2dFQUNtRDtBQUtuRCxTQUFTQztJQUNQLE1BQU1DLE1BQU0sSUFBSUMsV0FBVztJQUMzQkMsV0FBV0MsTUFBTSxDQUFDQyxlQUFlLENBQUNKO0lBQ2xDLE9BQU9LLE1BQU1DLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxJQUFNQSxFQUFFQyxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUcsTUFBTUMsSUFBSSxDQUFDO0FBQ3RFO0FBRUEsTUFBTUMsT0FBTztJQUNYQyxJQUFJO0lBQ0pDLFFBQVE7SUFDUkMsV0FBVztJQUNYQyxVQUFVO0lBQ1ZDLE9BQU87QUFDVDtBQXNCQSxNQUFNQztJQUNKLE1BQU1DLE9BQU9DLENBQWUsRUFBK0I7UUFDekQsbUJBQW1CO1FBRW5CLHlGQUF5RjtRQUN6RixNQUFNQyxRQUFRckI7UUFDZHNCLGFBQWFDLE9BQU8sQ0FBQyxxQkFBcUJGO1FBRTFDLE9BQU8sQ0FBQztJQUNWO0lBRUEsTUFBTUcsZ0JBQWdCSixDQUF3QixFQUErQjtRQUMzRSxPQUFPO1lBQUVLLE9BQU87UUFBd0M7SUFDMUQ7SUFFRCxNQUFNQyxtQkFBbUJDLE1BQWdDLEVBQStCO1FBQ3ZGLE1BQU0sRUFBRVYsS0FBSyxFQUFFVyxRQUFRLEVBQUUsR0FBR0Q7UUFFNUIsSUFBSTtZQUNGLE1BQU1FLFdBQVcsTUFBTUMsTUFBTSxxQ0FBcUM7Z0JBQ2hFQyxRQUFRO2dCQUNSQyxTQUFTO29CQUNQLGdCQUFnQjtvQkFDaEIsVUFBVTtnQkFDWjtnQkFDQUMsYUFBYTtnQkFDYkMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO29CQUNuQm5CO29CQUNBVztnQkFDRjtZQUNGO1lBRUEsTUFBTVMsT0FBTyxNQUFNUixTQUFTUyxJQUFJO1lBRWhDLElBQUksQ0FBQ1QsU0FBU1UsRUFBRSxFQUFFO2dCQUNoQix3Q0FBd0M7Z0JBQ3hDLElBQUlWLFNBQVNXLE1BQU0sS0FBSyxLQUFLO29CQUMzQixPQUFPO3dCQUFFZixPQUFPO29CQUE0QjtnQkFDOUM7Z0JBQ0EsaURBQWlEO2dCQUNqRCxPQUFPO29CQUFFQSxPQUFPWSxLQUFLSSxPQUFPLElBQUlKLEtBQUtaLEtBQUssSUFBSTtnQkFBd0I7WUFDeEU7WUFFQSxtREFBbUQ7WUFDbkQsTUFBTUosUUFBUWdCLEtBQUtoQixLQUFLLElBQUlyQjtZQUU1QnNCLGFBQWFDLE9BQU8sQ0FBQyxxQkFBcUJGO1lBRTFDLE9BQU8sQ0FBQztRQUNWLEVBQUUsT0FBT0ksT0FBTztZQUNkLHNEQUFzRDtZQUV0RCx5Q0FBeUM7WUFDekMsT0FBTztnQkFBRUEsT0FBTztZQUE0QjtRQUM5QztJQUNGO0lBQ0UsTUFBTWlCLGNBQWN0QixDQUFzQixFQUErQjtRQUN2RSxPQUFPO1lBQUVLLE9BQU87UUFBaUM7SUFDbkQ7SUFFQSxNQUFNa0IsZUFBZXZCLENBQXNCLEVBQStCO1FBQ3hFLE9BQU87WUFBRUssT0FBTztRQUErQjtJQUNqRDtJQUVBLE1BQU1tQixVQUEyRDtRQUMvRCxtQkFBbUI7UUFFbkIsOEVBQThFO1FBQzlFLE1BQU12QixRQUFRQyxhQUFhdUIsT0FBTyxDQUFDO1FBRW5DLElBQUksQ0FBQ3hCLE9BQU87WUFDVixPQUFPO2dCQUFFZ0IsTUFBTTtZQUFLO1FBQ3RCO1FBRUEsT0FBTztZQUFFQSxNQUFNekI7UUFBSztJQUN0QjtJQUVBLE1BQU1rQyxVQUF1QztRQUMzQ3hCLGFBQWF5QixVQUFVLENBQUM7UUFFeEIsT0FBTyxDQUFDO0lBQ1Y7QUFDRjtBQUVPLE1BQU1DLGFBQWEsSUFBSTlCLGFBQWEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWF6YXJcXERvd25sb2Fkc1xcY29tc3RhY2sgcHJvamVjdFxcQ28tYXBwLWZyb250ZW5kXFxzcmNcXGxpYlxcYXV0aFxcY2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5cclxuaW1wb3J0IHR5cGUgeyBVc2VyIH0gZnJvbSAnQC90eXBlcy91c2VyJztcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVG9rZW4oKTogc3RyaW5nIHtcclxuICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxMik7XHJcbiAgZ2xvYmFsVGhpcy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XHJcbiAgcmV0dXJuIEFycmF5LmZyb20oYXJyLCAodikgPT4gdi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XHJcbn1cclxuXHJcbmNvbnN0IHVzZXIgPSB7XHJcbiAgaWQ6ICdVU1ItMDAwJyxcclxuICBhdmF0YXI6ICcvYXNzZXRzL2F2YXRhci5wbmcnLFxyXG4gIGZpcnN0TmFtZTogJ1NvZmlhJyxcclxuICBsYXN0TmFtZTogJ1JpdmVycycsXHJcbiAgZW1haWw6ICdzb2ZpYUBkZXZpYXMuaW8nLFxyXG59IHNhdGlzZmllcyBVc2VyO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaWduVXBQYXJhbXMge1xyXG4gIGZpcnN0TmFtZTogc3RyaW5nO1xyXG4gIGxhc3ROYW1lOiBzdHJpbmc7XHJcbiAgZW1haWw6IHN0cmluZztcclxuICBwYXNzd29yZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhPQXV0aFBhcmFtcyB7XHJcbiAgcHJvdmlkZXI6ICdnb29nbGUnIHwgJ2Rpc2NvcmQnO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhQYXNzd29yZFBhcmFtcyB7XHJcbiAgZW1haWw6IHN0cmluZztcclxuICBwYXNzd29yZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc2V0UGFzc3dvcmRQYXJhbXMge1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNsYXNzIEF1dGhDbGllbnQge1xyXG4gIGFzeW5jIHNpZ25VcChfOiBTaWduVXBQYXJhbXMpOiBQcm9taXNlPHsgZXJyb3I/OiBzdHJpbmcgfT4ge1xyXG4gICAgLy8gTWFrZSBBUEkgcmVxdWVzdFxyXG5cclxuICAgIC8vIFdlIGRvIG5vdCBoYW5kbGUgdGhlIEFQSSwgc28gd2UnbGwganVzdCBnZW5lcmF0ZSBhIHRva2VuIGFuZCBzdG9yZSBpdCBpbiBsb2NhbFN0b3JhZ2UuXHJcbiAgICBjb25zdCB0b2tlbiA9IGdlbmVyYXRlVG9rZW4oKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjdXN0b20tYXV0aC10b2tlbicsIHRva2VuKTtcclxuXHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG5cclxuICBhc3luYyBzaWduSW5XaXRoT0F1dGgoXzogU2lnbkluV2l0aE9BdXRoUGFyYW1zKTogUHJvbWlzZTx7IGVycm9yPzogc3RyaW5nIH0+IHtcclxuICAgIHJldHVybiB7IGVycm9yOiAnU29jaWFsIGF1dGhlbnRpY2F0aW9uIG5vdCBpbXBsZW1lbnRlZCcgfTtcclxuICB9XHJcblxyXG4gYXN5bmMgc2lnbkluV2l0aFBhc3N3b3JkKHBhcmFtczogU2lnbkluV2l0aFBhc3N3b3JkUGFyYW1zKTogUHJvbWlzZTx7IGVycm9yPzogc3RyaW5nIH0+IHtcclxuICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcGFyYW1zO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDoxMDAwL2F1dGgvc2lnbmluJywge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGVtYWlsLFxyXG4gICAgICAgIHBhc3N3b3JkLFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciA0MDEgVW5hdXRob3JpemVkXHJcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgIHJldHVybiB7IGVycm9yOiAnSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZCcgfTtcclxuICAgICAgfVxyXG4gICAgICAvLyBGb3Igb3RoZXIgZXJyb3JzLCB1c2UgdGhlIEFQSSByZXNwb25zZSBtZXNzYWdlXHJcbiAgICAgIHJldHVybiB7IGVycm9yOiBkYXRhLm1lc3NhZ2UgfHwgZGF0YS5lcnJvciB8fCAnQXV0aGVudGljYXRpb24gZmFpbGVkJyB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFzc3VtaW5nIHRoZSBBUEkgcmV0dXJucyBhIHRva2VuIGluIHRoZSByZXNwb25zZVxyXG4gICAgY29uc3QgdG9rZW4gPSBkYXRhLnRva2VuIHx8IGdlbmVyYXRlVG9rZW4oKTtcclxuICAgIFxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2N1c3RvbS1hdXRoLXRva2VuJywgdG9rZW4pO1xyXG5cclxuICAgIHJldHVybiB7fTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgLy8gVHJ5IHRvIHBhcnNlIHRoZSBlcnJvciBtZXNzYWdlIGlmIGl0J3MgZnJvbSB0aGUgQVBJXHJcbiAgIFxyXG4gICAgLy8gSWYgaXQncyBhIG5ldHdvcmsgZXJyb3Igb3Igb3RoZXIgaXNzdWVcclxuICAgIHJldHVybiB7IGVycm9yOiAnSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZCcgfTtcclxuICB9XHJcbn1cclxuICBhc3luYyByZXNldFBhc3N3b3JkKF86IFJlc2V0UGFzc3dvcmRQYXJhbXMpOiBQcm9taXNlPHsgZXJyb3I/OiBzdHJpbmcgfT4ge1xyXG4gICAgcmV0dXJuIHsgZXJyb3I6ICdQYXNzd29yZCByZXNldCBub3QgaW1wbGVtZW50ZWQnIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVQYXNzd29yZChfOiBSZXNldFBhc3N3b3JkUGFyYW1zKTogUHJvbWlzZTx7IGVycm9yPzogc3RyaW5nIH0+IHtcclxuICAgIHJldHVybiB7IGVycm9yOiAnVXBkYXRlIHJlc2V0IG5vdCBpbXBsZW1lbnRlZCcgfTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFVzZXIoKTogUHJvbWlzZTx7IGRhdGE/OiBVc2VyIHwgbnVsbDsgZXJyb3I/OiBzdHJpbmcgfT4ge1xyXG4gICAgLy8gTWFrZSBBUEkgcmVxdWVzdFxyXG5cclxuICAgIC8vIFdlIGRvIG5vdCBoYW5kbGUgdGhlIEFQSSwgc28ganVzdCBjaGVjayBpZiB3ZSBoYXZlIGEgdG9rZW4gaW4gbG9jYWxTdG9yYWdlLlxyXG4gICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY3VzdG9tLWF1dGgtdG9rZW4nKTtcclxuXHJcbiAgICBpZiAoIXRva2VuKSB7XHJcbiAgICAgIHJldHVybiB7IGRhdGE6IG51bGwgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBkYXRhOiB1c2VyIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBzaWduT3V0KCk6IFByb21pc2U8eyBlcnJvcj86IHN0cmluZyB9PiB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY3VzdG9tLWF1dGgtdG9rZW4nKTtcclxuXHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYXV0aENsaWVudCA9IG5ldyBBdXRoQ2xpZW50KCk7XHJcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImdlbmVyYXRlVG9rZW4iLCJhcnIiLCJVaW50OEFycmF5IiwiZ2xvYmFsVGhpcyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIkFycmF5IiwiZnJvbSIsInYiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsInVzZXIiLCJpZCIsImF2YXRhciIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZW1haWwiLCJBdXRoQ2xpZW50Iiwic2lnblVwIiwiXyIsInRva2VuIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInNpZ25JbldpdGhPQXV0aCIsImVycm9yIiwic2lnbkluV2l0aFBhc3N3b3JkIiwicGFyYW1zIiwicGFzc3dvcmQiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImNyZWRlbnRpYWxzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwianNvbiIsIm9rIiwic3RhdHVzIiwibWVzc2FnZSIsInJlc2V0UGFzc3dvcmQiLCJ1cGRhdGVQYXNzd29yZCIsImdldFVzZXIiLCJnZXRJdGVtIiwic2lnbk91dCIsInJlbW92ZUl0ZW0iLCJhdXRoQ2xpZW50Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/auth/client.ts\n"));

/***/ })

});